
规范shell脚本的一般组成
#!环境声明,下面所有代码,

#注释文本
可执行代码

重定向输出:
>:只收集前面命令的正确输出
2>:只收集前面命令的错误输出
&>:手机前面命令的正确与错误输出

单引号'':取消所有字符的特殊意义,原样输出

为了提高脚本适应多变的环境与需求,所以引入了变量
变量类似于容器:以不变的名称,存储可以变化的值
为了降低脚本的使用难度,以及用户的体验,所以产生交互以及提示信息

read -p '屏幕的提示信息'
1.产生交互
2.记录用户在键盘上的输入
3.将记录的所有内容,最终赋值给一个变量

定义/赋值变量
设置变量时的注意事项
等号两边不要有空格
变量名只能由字母/数字/下划线组成,区分大小写
变量名不能以数字开头,不要使用关键字和特殊字符

引用变量值:$变量名
查看变量值:echo	$变量名 echo ${变量名}
$()或反撇号``:将命令的输出,直接作为参数,参与下一次运行
一般常用$(),反撇号行数多比较难看

变量的种类
环境变量:变量名一般为大写字母,由系统定义并且赋值完成,变量有三千多个
USER=当前系统登录的用户名

位置变量
在执行脚本时提供的命令行参数

预定义变量
$# 已加载的变量个数
$? 

自定义变量

条件测试
[测试表达式]  #每一部分都要有空格
[ -e /etc/passwd ]

常用的测试选项
检查文件状态
-e:存在为真
-d:存在,且必须为目录为真
-f:存在,且必须为文件为真
比较整数大小
-gt:大于
-ge:大于等于
-eq:等于 
-ne:不等于 
-lt:小于 
-le:小于等于
字符串对比
==  !=

if双分支处理

	if [条件测试];then
		命令序列
	elif [条件测试];then
		命令序列
	elif [条件测试];then
		命令序列
	else
		命令序列
	fi
		

$# -eq 0 判断用户是佛输入参数
>&2 将输出变为错误输出
exit 可以制定程序退出的状态值





















































































